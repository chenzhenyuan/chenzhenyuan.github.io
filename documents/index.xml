<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文档 on 翠竹园</title>
    <link>/documents/</link>
    <description>Recent content in 文档 on 翠竹园</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2018-{year} CHEN·ZHENYUAN. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 10 Mar 2022 16:57:00 +0800</lastBuildDate><atom:link href="/documents/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的文档示例</title>
      <link>/documents/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Thu, 10 Mar 2022 16:57:00 +0800</pubDate>
      
      <guid>/documents/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>copy-sync</title>
      <link>/documents/copy-sync/</link>
      <pubDate>Tue, 10 Dec 2019 23:51:06 +0000</pubDate>
      
      <guid>/documents/copy-sync/</guid>
      <description>copySync(src, dest, [options]) Copy a file or directory. The directory can have contents. Like cp -r. src &amp;lt;String&amp;gt; dest &amp;lt;String&amp;gt; options &amp;lt;Object&amp;gt; overwrite &amp;lt;boolean&amp;gt;: overwrite existing file or directory, default is true. Note that the copy operation will silently fail if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. errorOnExist &amp;lt;boolean&amp;gt;: when overwrite is false and the destination exists, throw an</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/copy/</guid>
      <description>copy(src, dest, [options, callback]) Copy a file or directory. The directory can have contents. Like cp -r.
 src &amp;lt;String&amp;gt; dest &amp;lt;String&amp;gt; options &amp;lt;Object&amp;gt;  overwrite &amp;lt;boolean&amp;gt;: overwrite existing file or directory, default is true. Note that the copy operation will silently fail if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. errorOnExist &amp;lt;boolean&amp;gt;: when overwrite is false and the destination exists, throw an error.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/emptydir-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/emptydir-sync/</guid>
      <description>emptyDirSync(dir) Ensures that a directory is empty. Deletes directory contents if the directory is not empty. If the directory does not exist, it is created. The directory itself is not deleted.
Alias: emptydirSync()
 dir &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3// assume this directory has a lot of files and folders 4fs.emptyDirSync(&amp;#39;/tmp/some/dir&amp;#39;) </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/emptydir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/emptydir/</guid>
      <description>emptyDir(dir, [callback]) Ensures that a directory is empty. Deletes directory contents if the directory is not empty. If the directory does not exist, it is created. The directory itself is not deleted.
Alias: emptydir()
 dir &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3// assume this directory has a lot of files and folders 4fs.emptyDir(&amp;#39;/tmp/some/dir&amp;#39;, err =&amp;gt; { 5 if (err) return console.error(err) 6 7 console.log(&amp;#39;success!&amp;#39;) 8}) 9 10// With promises 11fs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensuredir-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensuredir-sync/</guid>
      <description>ensureDirSync(dir) Ensures that the directory exists. If the directory structure does not exist, it is created. Like mkdir -p.
Aliases: mkdirsSync(), mkdirpSync()
 dir &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const dir = &amp;#39;/tmp/this/path/does/not/exist&amp;#39; 4fs.ensureDirSync(dir) 5// dir has now been created, including the directory it is to be placed in </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensuredir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensuredir/</guid>
      <description>ensureDir(dir, [callback]) Ensures that the directory exists. If the directory structure does not exist, it is created. Like mkdir -p.
Aliases: mkdirs(), mkdirp()
 dir &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const dir = &amp;#39;/tmp/this/path/does/not/exist&amp;#39; 4fs.ensureDir(dir, err =&amp;gt; { 5 console.log(err) // =&amp;gt; null 6 // dir has now been created, including the directory it is to be placed in 7}) 8 9// With Promises: 10fs.ensureDir(dir) 11.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensurefile-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensurefile-sync/</guid>
      <description>ensureFileSync(file) Ensures that the file exists. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is NOT MODIFIED.
Alias: createFileSync()
 file &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 4fs.ensureFileSync(file) 5// file has now been created, including the directory it is to be placed in </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensurefile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensurefile/</guid>
      <description>ensureFile(file, [callback]) Ensures that the file exists. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is NOT MODIFIED.
Alias: createFile()
 file &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 4fs.ensureFile(file, err =&amp;gt; { 5 console.log(err) // =&amp;gt; null 6 // file has now been created, including the directory it is to be placed in 7}) 8 9// With Promises: 10fs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensurelink-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensurelink-sync/</guid>
      <description>ensureLinkSync(srcpath, dstpath) Ensures that the link exists. If the directory structure does not exist, it is created.
 srcpath &amp;lt;String&amp;gt; dstpath &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const srcpath = &amp;#39;/tmp/file.txt&amp;#39; 4const dstpath = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 5fs.ensureLinkSync(srcpath, dstpath) 6// link has now been created, including the directory it is to be placed in </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensurelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensurelink/</guid>
      <description>ensureLink(srcpath, dstpath, [callback]) Ensures that the link exists. If the directory structure does not exist, it is created.
 srcpath &amp;lt;String&amp;gt; dstpath &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const srcpath = &amp;#39;/tmp/file.txt&amp;#39; 4const dstpath = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 5fs.ensureLink(srcpath, dstpath, err =&amp;gt; { 6 console.log(err) // =&amp;gt; null 7 // link has now been created, including the directory it is to be placed in 8}) 9 10// With Promises: 11fs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensuresymlink-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensuresymlink-sync/</guid>
      <description>ensureSymlinkSync(srcpath, dstpath, [type]) Ensures that the symlink exists. If the directory structure does not exist, it is created.
 srcpath &amp;lt;String&amp;gt; dstpath &amp;lt;String&amp;gt; type &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const srcpath = &amp;#39;/tmp/file.txt&amp;#39; 4const dstpath = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 5fs.ensureSymlinkSync(srcpath, dstpath) 6// symlink has now been created, including the directory it is to be placed in </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/ensuresymlink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/ensuresymlink/</guid>
      <description>ensureSymlink(srcpath, dstpath, [type, callback]) Ensures that the symlink exists. If the directory structure does not exist, it is created.
 srcpath &amp;lt;String&amp;gt; dstpath &amp;lt;String&amp;gt; type &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const srcpath = &amp;#39;/tmp/file.txt&amp;#39; 4const dstpath = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 5fs.ensureSymlink(srcpath, dstpath, err =&amp;gt; { 6 console.log(err) // =&amp;gt; null 7 // symlink has now been created, including the directory it is to be placed in 8}) 9 10// With Promises: 11fs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/move-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/move-sync/</guid>
      <description>moveSync(src, dest, [options]) Moves a file or directory, even across devices.
 src &amp;lt;String&amp;gt; dest &amp;lt;String&amp;gt; options &amp;lt;Object&amp;gt;  overwrite &amp;lt;boolean&amp;gt;: overwrite existing file or directory, default is false.    Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3fs.moveSync(&amp;#39;/tmp/somefile&amp;#39;, &amp;#39;/tmp/does/not/exist/yet/somefile&amp;#39;) Using overwrite option
1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3fs.moveSync(&amp;#39;/tmp/somedir&amp;#39;, &amp;#39;/tmp/may/already/existed/somedir&amp;#39;, { overwrite: true }) </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/move/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/move/</guid>
      <description>move(src, dest, [options, callback]) Moves a file or directory, even across devices.
 src &amp;lt;String&amp;gt; dest &amp;lt;String&amp;gt; options &amp;lt;Object&amp;gt;  overwrite &amp;lt;boolean&amp;gt;: overwrite existing file or directory, default is false.   callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3fs.move(&amp;#39;/tmp/somefile&amp;#39;, &amp;#39;/tmp/does/not/exist/yet/somefile&amp;#39;, err =&amp;gt; { 4 if (err) return console.error(err) 5 6 console.log(&amp;#39;success!&amp;#39;) 7}) 8 9fs.move(&amp;#39;/tmp/somefile&amp;#39;, &amp;#39;/tmp/does/not/exist/yet/somefile&amp;#39;) 10.then(() =&amp;gt; { 11 console.log(&amp;#39;success!&amp;#39;) 12}) 13.catch(err =&amp;gt; { 14 console.error(err) 15}) Using overwrite option</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/outputfile-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/outputfile-sync/</guid>
      <description>outputFileSync(file, data, [options]) Almost the same as writeFileSync (i.e. it overwrites), except that if the parent directory does not exist, it&amp;rsquo;s created. file must be a file path (a buffer or a file descriptor is not allowed). options are what you&amp;rsquo;d pass to fs.writeFileSync().
 file &amp;lt;String&amp;gt; data &amp;lt;String&amp;gt; | &amp;lt;Buffer&amp;gt; | &amp;lt;Uint8Array&amp;gt; options &amp;lt;Object&amp;gt; | &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 4fs.outputFileSync(file, &amp;#39;hello!&amp;#39;) 5 6const data = fs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/outputfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/outputfile/</guid>
      <description>outputFile(file, data, [options, callback]) Almost the same as writeFile (i.e. it overwrites), except that if the parent directory does not exist, it&amp;rsquo;s created. file must be a file path (a buffer or a file descriptor is not allowed). options are what you&amp;rsquo;d pass to fs.writeFile().
 file &amp;lt;String&amp;gt; data &amp;lt;String&amp;gt; | &amp;lt;Buffer&amp;gt; | &amp;lt;Uint8Array&amp;gt; options &amp;lt;Object&amp;gt; | &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/outputjson-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/outputjson-sync/</guid>
      <description>outputJsonSync(file, object, [options]) Almost the same as writeJsonSync, except that if the directory does not exist, it&amp;rsquo;s created. options are what you&amp;rsquo;d pass to jsonFile.writeFileSync().
Alias: outputJSONSync()
 file &amp;lt;String&amp;gt; object &amp;lt;Object&amp;gt; options &amp;lt;Object&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.json&amp;#39; 4fs.outputJsonSync(file, {name: &amp;#39;JP&amp;#39;}) 5 6const data = fs.readJsonSync(file) 7console.log(data.name) // =&amp;gt; JP </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/outputjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/outputjson/</guid>
      <description>outputJson(file, object, [options, callback]) Almost the same as writeJson, except that if the directory does not exist, it&amp;rsquo;s created. options are what you&amp;rsquo;d pass to jsonFile.writeFile().
Alias: outputJSON()
 file &amp;lt;String&amp;gt; object &amp;lt;Object&amp;gt; options &amp;lt;Object&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.json&amp;#39; 4fs.outputJson(file, {name: &amp;#39;JP&amp;#39;}, err =&amp;gt; { 5 console.log(err) // =&amp;gt; null 6 7 fs.readJson(file, (err, data) =&amp;gt; { 8 if (err) return console.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/pathexists-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/pathexists-sync/</guid>
      <description>pathExistsSync(file) An alias for fs.existsSync(), created for consistency with pathExists().</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/pathexists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/pathexists/</guid>
      <description>pathExists(file[, callback]) Test whether or not the given path exists by checking with the file system. Like fs.exists, but with a normal callback signature (err, exists). Uses fs.access under the hood.
 file &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/this/path/does/not/exist/file.txt&amp;#39; 4// Promise usage: 5fs.pathExists(file) 6 .then(exists =&amp;gt; console.log(exists)) // =&amp;gt; false 7// Callback usage: 8fs.pathExists(file, (err, exists) =&amp;gt; { 9 console.log(err) // =&amp;gt; null 10 console.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/readjson-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/readjson-sync/</guid>
      <description>readJsonSync(file, [options]) Reads a JSON file and then parses it into an object. options are the same that you&amp;rsquo;d pass to jsonFile.readFileSync.
Alias: readJSONSync()
 file &amp;lt;String&amp;gt; options &amp;lt;Object&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const packageObj = fs.readJsonSync(&amp;#39;./package.json&amp;#39;) 4console.log(packageObj.version) // =&amp;gt; 2.0.0  readJsonSync() can take a throws option set to false and it won&amp;rsquo;t throw if the JSON is invalid. Example:
1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3const file = &amp;#39;/tmp/some-invalid.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/readjson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/readjson/</guid>
      <description>readJson(file, [options, callback]) Reads a JSON file and then parses it into an object. options are the same that you&amp;rsquo;d pass to jsonFile.readFile.
Alias: readJSON()
 file &amp;lt;String&amp;gt; options &amp;lt;Object&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3fs.readJson(&amp;#39;./package.json&amp;#39;, (err, packageObj) =&amp;gt; { 4 if (err) console.error(err) 5 6 console.log(packageObj.version) // =&amp;gt; 0.1.3 7}) 8 9// Promise Usage 10fs.readJson(&amp;#39;./package.json&amp;#39;) 11.then(packageObj =&amp;gt; { 12 console.log(packageObj.version) // =&amp;gt; 0.1.3 13}) 14.catch(err =&amp;gt; { 15 console.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/remove-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/remove-sync/</guid>
      <description>removeSync(path) Removes a file or directory. The directory can have contents. Like rm -rf.
 path &amp;lt;String&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3// remove file 4fs.removeSync(&amp;#39;/tmp/myfile&amp;#39;) 5 6fs.removeSync(&amp;#39;/home/jprichardson&amp;#39;) // I just deleted my entire HOME directory. </description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/remove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/remove/</guid>
      <description>remove(path, [callback]) Removes a file or directory. The directory can have contents. Like rm -rf.
 path &amp;lt;String&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3// remove file 4fs.remove(&amp;#39;/tmp/myfile&amp;#39;, err =&amp;gt; { 5 if (err) return console.error(err) 6 7 console.log(&amp;#39;success!&amp;#39;) 8}) 9 10fs.remove(&amp;#39;/home/jprichardson&amp;#39;, err =&amp;gt; { 11 if (err) return console.error(err) 12 13 console.log(&amp;#39;success!&amp;#39;) // I just deleted my entire HOME directory. 14}) 15 16// Promise Usage 17fs.remove(&amp;#39;/tmp/myfile&amp;#39;) 18.</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/writejson-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/writejson-sync/</guid>
      <description>writeJsonSync(file, object, [options]) Writes an object to a JSON file. options are the same that you&amp;rsquo;d pass to jsonFile.writeFileSync().
Alias: writeJSONSync()
 file &amp;lt;String&amp;gt; object &amp;lt;Object&amp;gt; options &amp;lt;Object&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3fs.writeJsonSync(&amp;#39;./package.json&amp;#39;, {name: &amp;#39;fs-extra&amp;#39;})  See also: outputJsonSync()</description>
    </item>
    
    <item>
      <title></title>
      <link>/documents/writejson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/documents/writejson/</guid>
      <description>writeJson(file, object, [options, callback]) Writes an object to a JSON file. options are the same that you&amp;rsquo;d pass to jsonFile.writeFile().
Alias: writeJSON()
 file &amp;lt;String&amp;gt; object &amp;lt;Object&amp;gt; options &amp;lt;Object&amp;gt; callback &amp;lt;Function&amp;gt;  Example: 1const fs = require(&amp;#39;fs-extra&amp;#39;) 2 3fs.writeJson(&amp;#39;./package.json&amp;#39;, {name: &amp;#39;fs-extra&amp;#39;}, err =&amp;gt; { 4 if (err) return console.error(err) 5 6 console.log(&amp;#39;success!&amp;#39;) 7}) 8 9// With Promises 10fs.writeJson(&amp;#39;./package.json&amp;#39;, {name: &amp;#39;fs-extra&amp;#39;}) 11.then(() =&amp;gt; { 12 console.log(&amp;#39;success!&amp;#39;) 13}) 14.catch(err =&amp;gt; { 15 console.</description>
    </item>
    
  </channel>
</rss>
