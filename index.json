[{"categories":null,"content":"个人信息  江苏·盐城 / 男 / 1989-05   工作年限：10年   期望城市：上海 期望职位：Web前端  教育经历 技能清单 工作经历 项目经历  致谢 感谢您花时间阅读我的简历，期待能有机会和您共事。\n","date":"2017-08-20","img":"","permalink":"/hire/me/","series":null,"tags":null,"title":"Hire"},{"categories":null,"content":"","date":"2022-03-10","img":"","permalink":"/documents/%E6%88%91%E7%9A%84%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/","series":null,"tags":null,"title":"我的文档示例"},{"categories":null,"content":"copySync(src, dest, [options]) Copy a file or directory. The directory can have contents. Like cp -r.\n src \u0026lt;String\u0026gt; dest \u0026lt;String\u0026gt; options \u0026lt;Object\u0026gt;  overwrite \u0026lt;boolean\u0026gt;: overwrite existing file or directory, default is true. Note that the copy operation will silently fail if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. errorOnExist \u0026lt;boolean\u0026gt;: when overwrite is false and the destination exists, throw an error. Default is false. dereference \u0026lt;boolean\u0026gt;: dereference symlinks, default is false. preserveTimestamps \u0026lt;boolean\u0026gt;: will set last modification and access times to the ones of the original source files, default is false. filter \u0026lt;Function\u0026gt;: Function to filter copied files. Return true to include, false to exclude. This can also be a RegExp, however this is deprecated (See issue #239 for background).    Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3// copy file 4fs.copySync(\u0026#39;/tmp/myfile\u0026#39;, \u0026#39;/tmp/mynewfile\u0026#39;) 5 6// copy directory, even if it has subdirectories or files 7fs.copySync(\u0026#39;/tmp/mydir\u0026#39;, \u0026#39;/tmp/mynewdir\u0026#39;) Using filter function\n1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const filterFunc = (src, dest) =\u0026gt; { 4 // your logic here 5 // it will be copied if return true 6} 7 8fs.copySync(\u0026#39;/tmp/mydir\u0026#39;, \u0026#39;/tmp/mynewdir\u0026#39;, { filter: filterFunc }) ","date":"2019-12-10","img":"","permalink":"/documents/copy-sync/","series":["系列A"],"tags":null,"title":"Copy-Sync"},{"categories":null,"content":"运行环境 安装 Hugo 主程序 1brew install hugo 为 Hugo 安装主题 1git sumodules add \u0026lt;主题的仓库地址\u0026gt; 新建文章 1hugo new posts/article_name.md ","date":"2018-03-10","img":"","permalink":"/posts/2018-03-10/hugo_building_note/","series":null,"tags":null,"title":"Hugo搭建手记"},{"categories":null,"content":"I\u0026rsquo;m About.md\n","date":"2017-08-20","img":"","permalink":"/about/","series":null,"tags":null,"title":"关于"},{"categories":null,"content":"copy(src, dest, [options, callback]) Copy a file or directory. The directory can have contents. Like cp -r.\n src \u0026lt;String\u0026gt; dest \u0026lt;String\u0026gt; options \u0026lt;Object\u0026gt;  overwrite \u0026lt;boolean\u0026gt;: overwrite existing file or directory, default is true. Note that the copy operation will silently fail if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. errorOnExist \u0026lt;boolean\u0026gt;: when overwrite is false and the destination exists, throw an error. Default is false. dereference \u0026lt;boolean\u0026gt;: dereference symlinks, default is false. preserveTimestamps \u0026lt;boolean\u0026gt;: will set last modification and access times to the ones of the original source files, default is false. filter \u0026lt;Function\u0026gt;: Function to filter copied files. Return true to include, false to exclude. This can also be a RegExp, however this is deprecated (See issue #239 for background).   callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.copy(\u0026#39;/tmp/myfile\u0026#39;, \u0026#39;/tmp/mynewfile\u0026#39;, err =\u0026gt; { 4 if (err) return console.error(err) 5 6 console.log(\u0026#39;success!\u0026#39;) 7}) // copies file 8 9fs.copy(\u0026#39;/tmp/mydir\u0026#39;, \u0026#39;/tmp/mynewdir\u0026#39;, err =\u0026gt; { 10 if (err) return console.error(err) 11 12 console.log(\u0026#39;success!\u0026#39;) 13}) // copies directory, even if it has subdirectories or files 14 15// Promise usage: 16fs.copy(\u0026#39;/tmp/myfile\u0026#39;, \u0026#39;/tmp/mynewfile\u0026#39;) 17.then(() =\u0026gt; { 18 console.log(\u0026#39;success!\u0026#39;) 19}) 20.catch(err =\u0026gt; { 21 console.error(err) 22}) Using filter function\n1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const filterFunc = (src, dest) =\u0026gt; { 4 // your logic here 5 // it will be copied if return true 6} 7 8fs.copy(\u0026#39;/tmp/mydir\u0026#39;, \u0026#39;/tmp/mynewdir\u0026#39;, { filter: filterFunc }, err =\u0026gt; { 9 if (err) return console.error(err) 10 11 console.log(\u0026#39;success!\u0026#39;) 12}) ","date":"0001-01-01","img":"","permalink":"/documents/copy/","series":null,"tags":null,"title":""},{"categories":null,"content":"emptyDirSync(dir) Ensures that a directory is empty. Deletes directory contents if the directory is not empty. If the directory does not exist, it is created. The directory itself is not deleted.\nAlias: emptydirSync()\n dir \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3// assume this directory has a lot of files and folders 4fs.emptyDirSync(\u0026#39;/tmp/some/dir\u0026#39;) ","date":"0001-01-01","img":"","permalink":"/documents/emptydir-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"emptyDir(dir, [callback]) Ensures that a directory is empty. Deletes directory contents if the directory is not empty. If the directory does not exist, it is created. The directory itself is not deleted.\nAlias: emptydir()\n dir \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3// assume this directory has a lot of files and folders 4fs.emptyDir(\u0026#39;/tmp/some/dir\u0026#39;, err =\u0026gt; { 5 if (err) return console.error(err) 6 7 console.log(\u0026#39;success!\u0026#39;) 8}) 9 10// With promises 11fs.emptyDir(\u0026#39;/tmp/some/dir\u0026#39;) 12.then(() =\u0026gt; { 13 console.log(\u0026#39;success!\u0026#39;) 14}) 15.catch(err =\u0026gt; { 16 console.error(err) 17}) ","date":"0001-01-01","img":"","permalink":"/documents/emptydir/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureDirSync(dir) Ensures that the directory exists. If the directory structure does not exist, it is created. Like mkdir -p.\nAliases: mkdirsSync(), mkdirpSync()\n dir \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const dir = \u0026#39;/tmp/this/path/does/not/exist\u0026#39; 4fs.ensureDirSync(dir) 5// dir has now been created, including the directory it is to be placed in ","date":"0001-01-01","img":"","permalink":"/documents/ensuredir-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureDir(dir, [callback]) Ensures that the directory exists. If the directory structure does not exist, it is created. Like mkdir -p.\nAliases: mkdirs(), mkdirp()\n dir \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const dir = \u0026#39;/tmp/this/path/does/not/exist\u0026#39; 4fs.ensureDir(dir, err =\u0026gt; { 5 console.log(err) // =\u0026gt; null 6 // dir has now been created, including the directory it is to be placed in 7}) 8 9// With Promises: 10fs.ensureDir(dir) 11.then(() =\u0026gt; { 12 console.log(\u0026#39;success!\u0026#39;) 13}) 14.catch(err =\u0026gt; { 15 console.error(err) 16}) ","date":"0001-01-01","img":"","permalink":"/documents/ensuredir/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureFileSync(file) Ensures that the file exists. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is NOT MODIFIED.\nAlias: createFileSync()\n file \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 4fs.ensureFileSync(file) 5// file has now been created, including the directory it is to be placed in ","date":"0001-01-01","img":"","permalink":"/documents/ensurefile-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureFile(file, [callback]) Ensures that the file exists. If the file that is requested to be created is in directories that do not exist, these directories are created. If the file already exists, it is NOT MODIFIED.\nAlias: createFile()\n file \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 4fs.ensureFile(file, err =\u0026gt; { 5 console.log(err) // =\u0026gt; null 6 // file has now been created, including the directory it is to be placed in 7}) 8 9// With Promises: 10fs.ensureFile(file) 11.then(() =\u0026gt; { 12 console.log(\u0026#39;success!\u0026#39;) 13}) 14.catch(err =\u0026gt; { 15 console.error(err) 16}) ","date":"0001-01-01","img":"","permalink":"/documents/ensurefile/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureLinkSync(srcpath, dstpath) Ensures that the link exists. If the directory structure does not exist, it is created.\n srcpath \u0026lt;String\u0026gt; dstpath \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const srcpath = \u0026#39;/tmp/file.txt\u0026#39; 4const dstpath = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 5fs.ensureLinkSync(srcpath, dstpath) 6// link has now been created, including the directory it is to be placed in ","date":"0001-01-01","img":"","permalink":"/documents/ensurelink-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureLink(srcpath, dstpath, [callback]) Ensures that the link exists. If the directory structure does not exist, it is created.\n srcpath \u0026lt;String\u0026gt; dstpath \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const srcpath = \u0026#39;/tmp/file.txt\u0026#39; 4const dstpath = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 5fs.ensureLink(srcpath, dstpath, err =\u0026gt; { 6 console.log(err) // =\u0026gt; null 7 // link has now been created, including the directory it is to be placed in 8}) 9 10// With Promises: 11fs.ensureLink(srcpath, dstpath) 12.then(() =\u0026gt; { 13 console.log(\u0026#39;success!\u0026#39;) 14}) 15.catch(err =\u0026gt; { 16 console.error(err) 17}) ","date":"0001-01-01","img":"","permalink":"/documents/ensurelink/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureSymlinkSync(srcpath, dstpath, [type]) Ensures that the symlink exists. If the directory structure does not exist, it is created.\n srcpath \u0026lt;String\u0026gt; dstpath \u0026lt;String\u0026gt; type \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const srcpath = \u0026#39;/tmp/file.txt\u0026#39; 4const dstpath = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 5fs.ensureSymlinkSync(srcpath, dstpath) 6// symlink has now been created, including the directory it is to be placed in ","date":"0001-01-01","img":"","permalink":"/documents/ensuresymlink-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"ensureSymlink(srcpath, dstpath, [type, callback]) Ensures that the symlink exists. If the directory structure does not exist, it is created.\n srcpath \u0026lt;String\u0026gt; dstpath \u0026lt;String\u0026gt; type \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const srcpath = \u0026#39;/tmp/file.txt\u0026#39; 4const dstpath = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 5fs.ensureSymlink(srcpath, dstpath, err =\u0026gt; { 6 console.log(err) // =\u0026gt; null 7 // symlink has now been created, including the directory it is to be placed in 8}) 9 10// With Promises: 11fs.ensureSymlink(srcpath, dstpath) 12.then(() =\u0026gt; { 13 console.log(\u0026#39;success!\u0026#39;) 14}) 15.catch(err =\u0026gt; { 16 console.error(err) 17}) ","date":"0001-01-01","img":"","permalink":"/documents/ensuresymlink/","series":null,"tags":null,"title":""},{"categories":null,"content":"moveSync(src, dest, [options]) Moves a file or directory, even across devices.\n src \u0026lt;String\u0026gt; dest \u0026lt;String\u0026gt; options \u0026lt;Object\u0026gt;  overwrite \u0026lt;boolean\u0026gt;: overwrite existing file or directory, default is false.    Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.moveSync(\u0026#39;/tmp/somefile\u0026#39;, \u0026#39;/tmp/does/not/exist/yet/somefile\u0026#39;) Using overwrite option\n1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.moveSync(\u0026#39;/tmp/somedir\u0026#39;, \u0026#39;/tmp/may/already/existed/somedir\u0026#39;, { overwrite: true }) ","date":"0001-01-01","img":"","permalink":"/documents/move-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"move(src, dest, [options, callback]) Moves a file or directory, even across devices.\n src \u0026lt;String\u0026gt; dest \u0026lt;String\u0026gt; options \u0026lt;Object\u0026gt;  overwrite \u0026lt;boolean\u0026gt;: overwrite existing file or directory, default is false.   callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.move(\u0026#39;/tmp/somefile\u0026#39;, \u0026#39;/tmp/does/not/exist/yet/somefile\u0026#39;, err =\u0026gt; { 4 if (err) return console.error(err) 5 6 console.log(\u0026#39;success!\u0026#39;) 7}) 8 9fs.move(\u0026#39;/tmp/somefile\u0026#39;, \u0026#39;/tmp/does/not/exist/yet/somefile\u0026#39;) 10.then(() =\u0026gt; { 11 console.log(\u0026#39;success!\u0026#39;) 12}) 13.catch(err =\u0026gt; { 14 console.error(err) 15}) Using overwrite option\n1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.move(\u0026#39;/tmp/somedir\u0026#39;, \u0026#39;/tmp/may/already/existed/somedir\u0026#39;, { overwrite: true }, err =\u0026gt; { 4 if (err) return console.error(err) 5 6 console.log(\u0026#39;success!\u0026#39;) 7}) ","date":"0001-01-01","img":"","permalink":"/documents/move/","series":null,"tags":null,"title":""},{"categories":null,"content":"outputFileSync(file, data, [options]) Almost the same as writeFileSync (i.e. it overwrites), except that if the parent directory does not exist, it\u0026rsquo;s created. file must be a file path (a buffer or a file descriptor is not allowed). options are what you\u0026rsquo;d pass to fs.writeFileSync().\n file \u0026lt;String\u0026gt; data \u0026lt;String\u0026gt; | \u0026lt;Buffer\u0026gt; | \u0026lt;Uint8Array\u0026gt; options \u0026lt;Object\u0026gt; | \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 4fs.outputFileSync(file, \u0026#39;hello!\u0026#39;) 5 6const data = fs.readFileSync(file, \u0026#39;utf8\u0026#39;) 7console.log(data) // =\u0026gt; hello! ","date":"0001-01-01","img":"","permalink":"/documents/outputfile-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"outputFile(file, data, [options, callback]) Almost the same as writeFile (i.e. it overwrites), except that if the parent directory does not exist, it\u0026rsquo;s created. file must be a file path (a buffer or a file descriptor is not allowed). options are what you\u0026rsquo;d pass to fs.writeFile().\n file \u0026lt;String\u0026gt; data \u0026lt;String\u0026gt; | \u0026lt;Buffer\u0026gt; | \u0026lt;Uint8Array\u0026gt; options \u0026lt;Object\u0026gt; | \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 4fs.outputFile(file, \u0026#39;hello!\u0026#39;, err =\u0026gt; { 5 console.log(err) // =\u0026gt; null 6 7 fs.readFile(file, \u0026#39;utf8\u0026#39;, (err, data) =\u0026gt; { 8 if (err) return console.error(err) 9 console.log(data) // =\u0026gt; hello! 10 }) 11}) 12 13// With Promises: 14fs.outputFile(file, \u0026#39;hello!\u0026#39;) 15.then(() =\u0026gt; fs.readFile(file, \u0026#39;utf8\u0026#39;)) 16.then(data =\u0026gt; { 17 console.log(data) // =\u0026gt; hello! 18}) 19.catch(err =\u0026gt; { 20 console.error(err) 21}) ","date":"0001-01-01","img":"","permalink":"/documents/outputfile/","series":null,"tags":null,"title":""},{"categories":null,"content":"outputJsonSync(file, object, [options]) Almost the same as writeJsonSync, except that if the directory does not exist, it\u0026rsquo;s created. options are what you\u0026rsquo;d pass to jsonFile.writeFileSync().\nAlias: outputJSONSync()\n file \u0026lt;String\u0026gt; object \u0026lt;Object\u0026gt; options \u0026lt;Object\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.json\u0026#39; 4fs.outputJsonSync(file, {name: \u0026#39;JP\u0026#39;}) 5 6const data = fs.readJsonSync(file) 7console.log(data.name) // =\u0026gt; JP ","date":"0001-01-01","img":"","permalink":"/documents/outputjson-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"outputJson(file, object, [options, callback]) Almost the same as writeJson, except that if the directory does not exist, it\u0026rsquo;s created. options are what you\u0026rsquo;d pass to jsonFile.writeFile().\nAlias: outputJSON()\n file \u0026lt;String\u0026gt; object \u0026lt;Object\u0026gt; options \u0026lt;Object\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.json\u0026#39; 4fs.outputJson(file, {name: \u0026#39;JP\u0026#39;}, err =\u0026gt; { 5 console.log(err) // =\u0026gt; null 6 7 fs.readJson(file, (err, data) =\u0026gt; { 8 if (err) return console.error(err) 9 console.log(data.name) // =\u0026gt; JP 10 }) 11}) 12 13// With Promises: 14fs.outputJson(file, {name: \u0026#39;JP\u0026#39;}) 15.then(() =\u0026gt; fs.readJson(file)) 16.then(data =\u0026gt; { 17 console.log(data.name) // =\u0026gt; JP 18}) 19.catch(err =\u0026gt; { 20 console.error(err) 21}) ","date":"0001-01-01","img":"","permalink":"/documents/outputjson/","series":null,"tags":null,"title":""},{"categories":null,"content":"pathExistsSync(file) An alias for fs.existsSync(), created for consistency with pathExists().\n","date":"0001-01-01","img":"","permalink":"/documents/pathexists-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"pathExists(file[, callback]) Test whether or not the given path exists by checking with the file system. Like fs.exists, but with a normal callback signature (err, exists). Uses fs.access under the hood.\n file \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/this/path/does/not/exist/file.txt\u0026#39; 4// Promise usage: 5fs.pathExists(file) 6 .then(exists =\u0026gt; console.log(exists)) // =\u0026gt; false 7// Callback usage: 8fs.pathExists(file, (err, exists) =\u0026gt; { 9 console.log(err) // =\u0026gt; null 10 console.log(exists) // =\u0026gt; false 11}) ","date":"0001-01-01","img":"","permalink":"/documents/pathexists/","series":null,"tags":null,"title":""},{"categories":null,"content":"readJsonSync(file, [options]) Reads a JSON file and then parses it into an object. options are the same that you\u0026rsquo;d pass to jsonFile.readFileSync.\nAlias: readJSONSync()\n file \u0026lt;String\u0026gt; options \u0026lt;Object\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const packageObj = fs.readJsonSync(\u0026#39;./package.json\u0026#39;) 4console.log(packageObj.version) // =\u0026gt; 2.0.0  readJsonSync() can take a throws option set to false and it won\u0026rsquo;t throw if the JSON is invalid. Example:\n1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/some-invalid.json\u0026#39; 4const data = \u0026#39;{not valid JSON\u0026#39; 5fs.writeFileSync(file, data) 6 7const obj = fs.readJsonSync(file, { throws: false }) 8console.log(obj) // =\u0026gt; null ","date":"0001-01-01","img":"","permalink":"/documents/readjson-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"readJson(file, [options, callback]) Reads a JSON file and then parses it into an object. options are the same that you\u0026rsquo;d pass to jsonFile.readFile.\nAlias: readJSON()\n file \u0026lt;String\u0026gt; options \u0026lt;Object\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.readJson(\u0026#39;./package.json\u0026#39;, (err, packageObj) =\u0026gt; { 4 if (err) console.error(err) 5 6 console.log(packageObj.version) // =\u0026gt; 0.1.3 7}) 8 9// Promise Usage 10fs.readJson(\u0026#39;./package.json\u0026#39;) 11.then(packageObj =\u0026gt; { 12 console.log(packageObj.version) // =\u0026gt; 0.1.3 13}) 14.catch(err =\u0026gt; { 15 console.error(err) 16})  readJson() can take a throws option set to false and it won\u0026rsquo;t throw if the JSON is invalid. Example:\n1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3const file = \u0026#39;/tmp/some-invalid.json\u0026#39; 4const data = \u0026#39;{not valid JSON\u0026#39; 5fs.writeFileSync(file, data) 6 7fs.readJson(file, { throws: false }, (err, obj) =\u0026gt; { 8 if (err) console.error(err) 9 10 console.log(obj) // =\u0026gt; null 11}) 12 13// Promise Usage 14fs.readJson(file, { throws: false }) 15.then(obj =\u0026gt; { 16 console.log(obj) // =\u0026gt; null 17}) 18.catch(err =\u0026gt; { 19 console.error(err) // Not called 20}) ","date":"0001-01-01","img":"","permalink":"/documents/readjson/","series":null,"tags":null,"title":""},{"categories":null,"content":"removeSync(path) Removes a file or directory. The directory can have contents. Like rm -rf.\n path \u0026lt;String\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3// remove file 4fs.removeSync(\u0026#39;/tmp/myfile\u0026#39;) 5 6fs.removeSync(\u0026#39;/home/jprichardson\u0026#39;) // I just deleted my entire HOME directory. ","date":"0001-01-01","img":"","permalink":"/documents/remove-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"remove(path, [callback]) Removes a file or directory. The directory can have contents. Like rm -rf.\n path \u0026lt;String\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3// remove file 4fs.remove(\u0026#39;/tmp/myfile\u0026#39;, err =\u0026gt; { 5 if (err) return console.error(err) 6 7 console.log(\u0026#39;success!\u0026#39;) 8}) 9 10fs.remove(\u0026#39;/home/jprichardson\u0026#39;, err =\u0026gt; { 11 if (err) return console.error(err) 12 13 console.log(\u0026#39;success!\u0026#39;) // I just deleted my entire HOME directory. 14}) 15 16// Promise Usage 17fs.remove(\u0026#39;/tmp/myfile\u0026#39;) 18.then(() =\u0026gt; { 19 console.log(\u0026#39;success!\u0026#39;) 20}) 21.catch(err =\u0026gt; { 22 console.error(err) 23}) ","date":"0001-01-01","img":"","permalink":"/documents/remove/","series":null,"tags":null,"title":""},{"categories":null,"content":"writeJsonSync(file, object, [options]) Writes an object to a JSON file. options are the same that you\u0026rsquo;d pass to jsonFile.writeFileSync().\nAlias: writeJSONSync()\n file \u0026lt;String\u0026gt; object \u0026lt;Object\u0026gt; options \u0026lt;Object\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.writeJsonSync(\u0026#39;./package.json\u0026#39;, {name: \u0026#39;fs-extra\u0026#39;})  See also: outputJsonSync()\n","date":"0001-01-01","img":"","permalink":"/documents/writejson-sync/","series":null,"tags":null,"title":""},{"categories":null,"content":"writeJson(file, object, [options, callback]) Writes an object to a JSON file. options are the same that you\u0026rsquo;d pass to jsonFile.writeFile().\nAlias: writeJSON()\n file \u0026lt;String\u0026gt; object \u0026lt;Object\u0026gt; options \u0026lt;Object\u0026gt; callback \u0026lt;Function\u0026gt;  Example: 1const fs = require(\u0026#39;fs-extra\u0026#39;) 2 3fs.writeJson(\u0026#39;./package.json\u0026#39;, {name: \u0026#39;fs-extra\u0026#39;}, err =\u0026gt; { 4 if (err) return console.error(err) 5 6 console.log(\u0026#39;success!\u0026#39;) 7}) 8 9// With Promises 10fs.writeJson(\u0026#39;./package.json\u0026#39;, {name: \u0026#39;fs-extra\u0026#39;}) 11.then(() =\u0026gt; { 12 console.log(\u0026#39;success!\u0026#39;) 13}) 14.catch(err =\u0026gt; { 15 console.error(err) 16})  See also: outputJson()\n","date":"0001-01-01","img":"","permalink":"/documents/writejson/","series":null,"tags":null,"title":""},{"categories":null,"content":"","date":"0001-01-01","img":"","permalink":"/photos/","series":null,"tags":null,"title":"图库"}]